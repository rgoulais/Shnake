# Nom du workflow qui apparaîtra dans l'onglet "Actions" de ton dépôt
name: Build and Release Game

# Condition de déclenchement : ce workflow se lance UNIQUEMENT
# quand tu pousses un nouveau tag qui commence par 'v' (ex: v1.0, v1.1.2)
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    # On utilise la dernière version d'Ubuntu pour orchestrer la release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Autorise l'action à créer une release et à uploader des fichiers

    steps:
      # --- 1. Préparation ---

      # Récupère le code source de ton dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # Installe l'environnement .NET (ajuste la version si besoin)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' # Utilise la version de .NET de ton projet

      # --- 2. Compilation pour chaque plateforme ---

      # Windows (64-bit)
      - name: Publish for Windows
        run: dotnet publish --configuration Release --runtime win-x64 --self-contained true /p:PublishSingleFile=true
        # --self-contained : inclut le runtime .NET pour que le jeu fonctionne partout
        # /p:PublishSingleFile=true : crée un seul fichier .exe, c'est plus propre !

      # Linux (64-bit)
      - name: Publish for Linux
        run: dotnet publish --configuration Release --runtime linux-x64 --self-contained true /p:PublishSingleFile=true

      # macOS (64-bit)
      - name: Publish for macOS
        run: dotnet publish --configuration Release --runtime osx-x64 --self-contained true /p:PublishSingleFile=true

      # --- 3. Archivage des binaires ---

      # Crée une archive .zip pour chaque binaire et ses assets
      # On doit d'abord trouver le nom du projet, qui est le nom du fichier .csproj
      - name: Get project name
        id: get_project_name
        run: echo "project_name=$(basename -s .csproj $(find . -name '*.csproj'))" >> $GITHUB_ENV

      - name: Archive Windows release
        run: |
          mkdir -p release/windows
          cp -r Assets release/windows/Assets
          cp bin/Release/net9.0/win-x64/publish/${{ env.project_name }}.exe release/windows/
          cd release/windows && zip -r ../Shnake-Windows-x64.zip .

      - name: Archive Linux release
        run: |
          mkdir -p release/linux
          cp -r Assets release/linux/Assets
          cp bin/Release/net9.0/linux-x64/publish/${{ env.project_name }} release/linux/
          cd release/linux && zip -r ../Shnake-Linux-x64.zip .

      - name: Archive macOS release
        run: |
          mkdir -p release/macos
          cp -r Assets release/macos/Assets
          cp bin/Release/net9.0/osx-x64/publish/${{ env.project_name }} release/macos/
          cd release/macos && zip -r ../Shnake-macOS-x64.zip .

      # --- 4. Création de la Release sur GitHub ---

      # Utilise une action de la communauté pour créer une Release et y attacher les .zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Utilise le contenu du tag (ex: v1.0) comme nom de la release
          name: Release ${{ github.ref_name }}
          # Génère automatiquement le texte de la release à partir des derniers commits
          generate_release_notes: true
          # Les fichiers à uploader
          files: |
            release/Shnake-Windows-x64.zip
            release/Shnake-Linux-x64.zip
            release/Shnake-macOS-x64.zip
